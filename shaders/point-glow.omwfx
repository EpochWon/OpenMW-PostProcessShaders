uniform_float point_glow_intensity {
    default = 0.35;
    min = 0.0;
    max = 10.0;
    step = 0.05;
    display_name = "Intensity";
    description = "Intensity of glow around point lights";
    header = "Point Glow";
}

uniform_float point_glow_min_fade_dist {
    default = 50.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    display_name = "Minimum Fade";
    description = "Minimum distance from the camera that point glow starts to fade in";
}

uniform_float point_glow_max_fade_dist {
    default = 100.0;
    min = 0.0;
    max = 1024.0;
    step = 1.0;
    display_name = "Maximum Fade";
    description = "Distance from the camera that point glow fully fades in";
}

uniform_float point_glow_fade {
    default = 0.2;
    min = 0.0;
    max = 1.0;
    step = 0.05;
    display_name = "Fade Amount";
    description = "How much point glow fades out when close to the camera. Use this to fade out torches/lamps that the player is holding.";
}

uniform_float point_glow_min {
    default = 42.0;
    min = 0.0;
    max = 50.0;
    step = 1.0;
    display_name = "Minimum Distance";
    description = "The minimum distance at which point glow has its maximum value";
}

uniform_float point_glow_falloff {
    default = 1.175;
    min = 0.5;
    max = 2.0;
    step = 0.025;
    display_name = "Falloff";
    description = "The exponent used to control point glow falloff/attenuation";
}

uniform_bool clamp_point_glow {
    default = true;
    display_name = "Clamp To Light Radius";
    description = "Whether point glow is clamped to the radius of the light (may reduce artifacts and improve performance)";
}

uniform_bool dithering_enabled {
	default = false;
	display_name = "Enable Dithering";
	description = "Apply dithering to deband the glow effect";
}

uniform_bool exterior_enabled {
	default = true;
	display_name = "Enable in Exteriors";
	description = "Whether the point glow effect should be enabled when in an exterior";
}

uniform_bool uEnabled {
	default = true;
	header = "Debug";
	display_name = "Enable Shader";
	description = "Toggle the entire shader";
}

shared {

    vec3 rand(vec2 n) {
        return fract(sin(vec3(1.0, 3.0, 7.0) * dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
    }

    float attenuation_strength_real(vec3 rpos) {
        float d2 = rpos.x * rpos.x + rpos.y * rpos.y + rpos.z * rpos.z;
        return 1.0 / (point_glow_min * point_glow_min + pow(d2, point_glow_falloff));
    }

    float map(float value, float min1, float max1, float min2, float max2) {
	  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
	}

    vec3 apply_point_glow(vec3 wpos, vec3 dir, float max_dist, vec3 color, vec2 uv) {
        vec3 light_color = vec3(0.0);
        float mask = 0.0;
        for (int i = 0; i < omw_GetPointLightCount(); i ++) {
            vec3 light_pos = omw_GetPointLightWorldPos(i);
            // Project light_pos to dir line
            float t = max(dot(light_pos - wpos, dir), 0.0);
            vec3 nearest = wpos + dir * min(t, max_dist);

            vec3 difference = light_pos - nearest;
            float distance_2 = dot(difference, difference);

            if (clamp_point_glow) {
                if (distance_2 > pow(omw_GetPointLightRadius(i), 2.0)) {
                    continue;
                }
            }

            float spread = 0.6;
            //if (point_glow_diffusion && !omw.isInterior) {
            //    spread /= 1.0 + fog_at(light_pos, min(t, max_dist), dir, dyn_clouds, dyn_mist).x * 200.0;
            //}

            float strength = pow(attenuation_strength_real(difference), spread)
                * point_glow_intensity
                * max(1.0 - t * 0.0002, 0.0);

			// Fade out point lights that are too close to the camera
			{
				float d2 = distance(omw.eyePos.xyz, light_pos);
				d2 = map(d2, point_glow_min_fade_dist, point_glow_max_fade_dist, point_glow_fade, 1.0);
				d2 = clamp(d2, point_glow_fade, 1.0);
				strength *= d2;
			}

            if (clamp_point_glow) {
                strength *= max(0.0, 1.0 - distance_2 / pow(omw_GetPointLightRadius(i), 2.0));
            }

            light_color += omw_GetPointLightDiffuse(i) * 100.0 * strength;
            mask += 100.0 * strength;
        }

        // moved dithering to inside the glow function in order to mask it to just the glow areas, but it still makes the whole image slightly brighter
        // maybe move to blue noise in the future or something
        if (dithering_enabled) {
            light_color += mix(rand(uv * 1000.0) * 2.0 / 255.0, vec3(0.0), mask);
        }
        return light_color;
    }

}

fragment main {
	omw_In vec2 omw_TexCoord;


	void main()
	{

		vec4 scene = omw_GetLastShader(omw_TexCoord);

		if (uEnabled) {
			vec4 col = scene;
            vec3 wpos = omw_GetWorldPosFromUV(omw_TexCoord);
            float max_dist = distance(omw.eyePos.xyz, wpos);
            vec3 dir = (wpos - omw.eyePos.xyz) / max_dist;

            if (!exterior_enabled && !omw.isInterior) {
                omw_FragColor = col;
                return;
            }

			vec3 glow = apply_point_glow(omw.eyePos.xyz, dir, max_dist, col.rgb, omw_TexCoord);

            col.rgb += glow;
			omw_FragColor = col;
		}
		else {
			omw_FragColor = scene;
		}
	}
}

technique {
    description = "Zesterer's point glow from the Clouds shader, standalone";
    passes = main;
    version = "1.0";
    author = "Zesterer, Epoch";
    hdr = true;
    pass_lights = true;
}
