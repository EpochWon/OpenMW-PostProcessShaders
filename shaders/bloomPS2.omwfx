uniform_float uThreshold  {
    default = 2.0;
    min = 1.0;
    max = 10.0;
    step = 0.01;
	display_name = "Bloom Threshold";
}

uniform_vec2 uScale {
    default = vec2(1,1);
    min = vec2(0,0);
    max = vec2(10,10);
    step = 0.1;
	display_name = "Blur Scale";
}

uniform_vec3 uColor {
	default = vec3(1,1,1);
	min = vec3(0,0,0);
	max = vec3(1,1,1);
	step = 0.01;
	display_name = "Color Tint";
}

uniform_float uAmount {
	default = 1.0;
	min = 0.0;
	max = 10.0;
	step = 0.1;
	display_name = "Strength";
}

uniform_float uSkyFactor {
    default = 0.5;
    min = 0.0;
    max = 2.0;
    step = 0.01;
	display_name = "Sky Intensity";
	description = "Brightness multiplier for the Sky, may have issues with built in fog";
}

uniform_bool uDebug {
	default = false;
	display_name = "Debug";
	description = "Show only the bloom effect without blending";
}

render_target RT_Threshold {
    width_ratio = 0.125;
    height_ratio = 0.125;
    internal_format = rgb;
    source_type = float;
	wrap_s = repeat;
	wrap_t = repeat;
}

render_target RT_Blur {
    width_ratio = 0.125;
    height_ratio = 0.125;
    internal_format = rgb;
    source_type = float;
	wrap_s = repeat;
	wrap_t = repeat;
}


fragment threshold(target=RT_Threshold) {
	omw_In vec2 omw_TexCoord;
	
	void main()
	{
		vec4 scene = omw_GetLastShader(omw_TexCoord);
		
		scene.r = pow(scene.r, uThreshold);
		scene.g = pow(scene.g, uThreshold);
		scene.b = pow(scene.b, uThreshold);
		
		bool is_sky = (omw_GetLinearDepth(omw_TexCoord) > omw.far*0.999);
		float factor = is_sky ? uSkyFactor : 1.0;
		
		omw_FragColor = scene * factor;	
	}
}

fragment blur(target=RT_Blur, rt1=RT_Threshold){
	omw_In vec2 omw_TexCoord;
	
	void main()
	{
		vec2 uv = omw_TexCoord;
		vec2 pix = uScale / omw.resolution;
		
		vec4 color = omw_Texture2D(RT_Threshold, uv) * 0.204164;
		
		//U
		color += omw_Texture2D(RT_Threshold, uv + vec2(pix.x * 8 * 1.407333, 0)) * 0.304005;
		color += omw_Texture2D(RT_Threshold, uv - vec2(pix.x * 4 * 1.407333, 0)) * 0.304005;
		color += omw_Texture2D(RT_Threshold, uv + vec2(pix.x * 2 * 3.294215, 0)) * 0.093913;
		color += omw_Texture2D(RT_Threshold, uv - vec2(pix.x * 1 * 3.294215, 0)) * 0.093913;
		//V
		color += omw_Texture2D(RT_Threshold,( uv + vec2(0, pix.y * 8 * 1.407333))) * 0.304005;
		color += omw_Texture2D(RT_Threshold,( uv - vec2(0, pix.y * 4 * 1.407333))) * 0.304005;
		color += omw_Texture2D(RT_Threshold,( uv + vec2(0, pix.y * 2 * 3.294215))) * 0.093913;
		color += omw_Texture2D(RT_Threshold,( uv - vec2(0, pix.y * 1 * 3.294215))) * 0.093913;
		
		color *= 0.25;
		omw_FragColor = color;
	}
}

fragment main(rt1=RT_Blur) {
	omw_In vec2 omw_TexCoord;
	
	void main()
	{
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 blur = omw_Texture2D(RT_Blur, omw_TexCoord).rgb;
		if (uDebug) {
			scene = blur.rgb * (uAmount * uColor);
		} else {
			scene = blur.rgb * (uAmount * uColor) + scene;
		}
		omw_FragColor = vec4(scene.rgb, 1);
	}
}

technique {
    description = "Playstation 2 era style bloom. Also similar to Oblivion's bloom.
	Based on: https://github.com/Matsilagi/RSJankShaders/blob/main/Shaders/BadBloomPS2.fx";
    passes = threshold, blur, main;
    version = "1.0";
    author = "Epoch";
}
