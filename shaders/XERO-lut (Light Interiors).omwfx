uniform_bool uEnabled {
	default = true;
}

uniform_bool flipV {
	default = true;
}

sampler_2d SamplerLUT {
	source = "textures/XERO-lut.tga";
	mag_filter = linear;
	min_filter = linear;
}

shared {
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
	
	vec3 toLog(vec3 col) {
		return max(vec3(0), pow(col, vec3(0.45)) * 1.099 - 0.099);
	}
	
	vec3 ClutFunc(vec3 colorIN, sampler2D LutSampler) {
		vec2 CLut_pSize = vec2(0.00390625, 0.0625);
		vec4 CLut_UV;
		colorIN = saturate(colorIN) * 15.0;
		CLut_UV.w = floor(colorIN.b);
		CLut_UV.xy = (colorIN.rg + 0.5) * CLut_pSize;
		CLut_UV.x += CLut_UV.w * CLut_pSize.y;
		CLut_UV.z = CLut_UV.x + CLut_pSize.y;
		if (flipV) {
			CLut_UV.y = 1.0 - CLut_UV.y;
		}
		return mix(omw_Texture2D(LutSampler, CLut_UV.xy).rgb, omw_Texture2D(LutSampler, CLut_UV.zy).rgb, colorIN.b - CLut_UV.w);
	}
	
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		
		vec4 scene = omw_GetLastShader(omw_TexCoord);
		
		if (uEnabled) {
			
			scene.rgb = mix(scene.rgb, toLog(scene.rgb), omw.isInterior);
			scene.rgb = ClutFunc(scene.rgb, SamplerLUT);
			
			omw_FragColor = vec4(scene.rgb, 1.0);
		} 
		else {
			omw_FragColor = scene;
		}
	}
}

technique {
    description = "XERO-LUT ported from MGEXE";
    passes = main;
    version = "1.0";
    author = "xerofoxx, ported by Epoch";
}
