uniform_float fRatio {
    default = 0.4;
    min = 0.0;
    max = 1.0;
    step = 0.01;
}

uniform_vec3 moodRGB {
	default = vec3(0.35, 0.30, 0.25);
	min = vec3(0.0, 0.0, 0.0);
	max = vec3(1.0, 1.0, 1.0);
	step = 0.01;
}

uniform_bool uEnabled {
	default = true;
	display_name = "Enable Shader";
}

shared {
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}
	float saturate(float value) {
		return clamp(value, 0.0, 1.0);
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;


	void main()
	{

        vec4 scene = omw_GetLastShader(omw_TexCoord);
        vec3 colInput = scene.rgb;

        vec3 colMood = moodRGB;

        float fLum = dot(colInput, vec3(1.0)) / 3.0;

        colMood = mix(vec3(0.0), colMood, saturate(fLum * 2.0));
        colMood = mix(colMood, vec3(1.0), saturate(fLum - 0.5) * 2.0);

        vec3 colOutput = mix(colInput, colMood, saturate(fLum * fRatio));

		if (uEnabled) {
			omw_FragColor = vec4(colOutput, 1.0);
		}
		else {
			omw_FragColor = scene;
		}
	}
}

technique {
    description = "ColorMood ported from MGEXE";
    passes = main;
    version = "1.0";
    author = "Ported by Epoch";
}
