uniform_float uTexScale {
	default = 512.0;
	min = 1.0;
	step = 1.0;
	header = "Caustics";
	display_name = "Caustics Tiling";
}

uniform_float uMinBrightness {
	default = 0.5;
	step = 0.01;
	max = 1.0;
	display_name = "Min Brightness";
	description = "Background colour that the underwater gets tinted to where there are caustics";
}

uniform_float uCausticBrightness {
	default = 1.0;
	step = 0.01;
	display_name = "Global Caustics Brightness";
	description = "Global Brightness of the caustics";
}

uniform_float uDayBrightness {
	default = 1.0;
	step = 0.01;
	display_name = "Day Brightness";
	description = "Brightness of the caustics during the day";
}

uniform_float uNightBrightness {
	default = 0.3;
	step = 0.01;
	display_name = "Night Brightness";
	description = "Brightness of the caustics at night";
}

uniform_float uPanningSpeed {
	default = 1.0;
	step = 0.01;
	display_name = "Panning Speed";
}

uniform_float uFadeLength {
	default = 256.0;
	min = 1.0;
	step = 1.0;
	display_name = "Caustics Fade-In Length";
	description = "Distance for caustics to fade in from the water surface";
}

uniform_bool uSunTint {
	default = true;
	description = "Tint the caustics to the colour of the sun/moon";
	display_name = "Sun Tint";
}

uniform_bool uSunMask {
	default = true;
	description = "Fade out casutics that are facing away from up, meaning caustics wont appear on the underside of surfaces";
	display_name = "Direction Masking";
}

uniform_bool uFog {
	default = true;
	description = "Re-apply fog after caustics, since caustics overwrite the built in fog. This will potentially cause outline artifacts if MSAA is enabled.
You might want this off if you are using another shader that applies underwater fog, such as waterFog";
	display_name = "Re-Apply Fog";
}

uniform_int uChromaticAbberation {
	default = 2;
	min = 0;
	max = 2;
	header = "Chromatic Abberation";
	display_name = "Chromatic Abberation";
	description = "0 - Disabled
1 - Static split value
2 - Sine animated split";
}

uniform_float uChromaticSpread {
	default = 0.5;
	step = 0.01;
	display_name = "Spread";
	description = "Only for when Chromatic Abberation is 1";
}

uniform_float uChromaticSpeed {
	default = 0.25;
	step = 0.01;
	display_name = "Sine Split Speed";
	description = "Speed at which the chromatic abberation splits. Only for when Chromatic Abberation is 2";
}

uniform_float uChromaticSpreadSine {
	default = 1.0;
	step = 0.01;
	display_name = "Sine Spread";
	description = "Only for when Chromatic Abberation is 2";
}

uniform_bool uFollowSun {
	default = true;
	header = "Sun Projection";
	display_name = "Follow Sun";
	description = "Project caustics along the sun direction";
}

uniform_float uDistortStrength {
	default = 1.0;
	min = 0.0;
	step = 0.01;
	display_name = "Distortion Strength";
	description = "Strength of sunlight projection";
}

uniform_float uHeightOffset {
	default = 0.0;
	step = 10.0;
	display_name = "Height Offset";
	description = "Offset of the water surface for sunlight projection, this value is the height in which zero distortion will occur";
}

uniform_bool uDithering {
	default = true;
	header = "Dithering";
	display_name = "Dithering";
	description = "Applies blue noise dithering to reduce colour banding. More noticeable when Re-Apply Fog is enabled.";
}

uniform_bool uTemporalDithering {
    default = true;
    display_name = "Temporal Dithering";
    description = "Whether the dithering should be animated. Animated dithering changes each frame, making the dither pattern far less visible";
}

uniform_float uDitheringStrength {
    default = 256.0;
    min = 1.0;
    max = 256.0;
    step = 1.0;
    display_name = "Dithering Strength";
    description = "Strength of the dithering effect, lower values make the effect stronger. Stronger dithering reduces more banding, but the dithering pattern becomes more visible.";
}

uniform_bool uCausticsMask {
	default = false;
	header = "Debug";
	display_name = "Show Caustics Term";
}

uniform_bool uEnabled {
	default = true;
	display_name = "Enable Shader";
}

sampler_2d causticsTex {
	source = "textures/caustics.png";
	wrap_s = repeat;
	wrap_t = repeat;
}

sampler_2d blueNoise {
    source = "textures/blue-noise256.png";
    mag_filter = nearest;
    min_filter = nearest;
    wrap_s = repeat;
    wrap_t = repeat;
}

shared {
	vec3 saturate(vec3 value) {
		return clamp(value, 0.0, 1.0);
	}

	float saturate(float value) {
		return clamp(value, 0.0, 1.0);
	}
	
	vec2 panner(vec2 uv, float speed, float tiling, vec2 direction) {
		vec2 panner = (direction * omw.simulationTime * (speed * uPanningSpeed)) + (uv * tiling);
		return panner;
	}

	vec3 causticSampler(sampler2D causticsSampler, vec2 uv, float split) {
		vec2 uv1 = uv + vec2(split, split);
		vec2 uv2 = uv + vec2(split, -split);
		vec2 uv3 = uv + vec2(-split, -split);
		
		float r = omw_Texture2D(causticsSampler, uv1).r;
		float g = omw_Texture2D(causticsSampler, uv2).r;
		float b = omw_Texture2D(causticsSampler, uv3).r;
		
		return vec3(r, g, b);
	}

	vec3 sampleCaustics(vec2 pos) {
		float split = 0.0;
		if (uChromaticAbberation == 1) {
			split = uChromaticSpread / 100.0;
		} else if (uChromaticAbberation == 2) {
			split = sin(omw.simulationTime * uChromaticSpeed) * ((1.0 / uTexScale) * uChromaticSpreadSine);
		}
		
		vec2 uv1 = panner(pos, 0.1, 1.0 / uTexScale, vec2(1, 1)) + vec2(0.4181, 0.3548);
		vec2 uv2 = panner(pos, 0.1, 1.0 / uTexScale, vec2(-1, -1)) + vec2(0.864861, 0.148384);
		vec2 uv3 = panner(pos, 0.1, 1.0 / uTexScale, vec2(-1, 1))+ vec2(0.65134, 0.751638);
		vec2 uv4 = panner(pos, 0.1, 1.0 / uTexScale, vec2(1, -1));
		
		vec3 caustics1 = causticSampler(causticsTex, uv1, split).rgb;
		vec3 caustics2 = causticSampler(causticsTex, uv2, split).rgb;
		vec3 caustics3 = causticSampler(causticsTex, uv3, split).rgb;
		vec3 caustics4 = causticSampler(causticsTex, uv4, split).rgb;
	
		vec3 result = min(min(caustics1, caustics2)* 1.5, min(caustics3, caustics4)* 1.5) * 1.5;
		return result;
	}
}

fragment main {
	omw_In vec2 omw_TexCoord;
	

	void main()
	{
		float waterH = omw.waterHeight;
		bool waterEnabled = omw.isWaterEnabled;
		
		vec3 wpos =  omw_GetWorldPosFromUV(omw_TexCoord);
		vec3 sunDir = -normalize(omw.sunPos.xyz);
		vec3 adjustedPos = sunDir * ((wpos.z + omw.waterHeight + uHeightOffset) * uDistortStrength);
		adjustedPos += vec3(wpos.xy, 0.0);
		
		vec2 wposUV = adjustedPos.xy;
		
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		vec3 worldPos = omw_GetWorldPosFromUV(omw_TexCoord); 

		vec3 normals = omw_GetNormalsWorldSpace(omw_TexCoord);

		bool daytime;
		if (omw.sunPos.z > 0.0)
			daytime = true;
		else
			daytime = false;
		
		vec3 causticsTerm = vec3(1.0);
		if (waterEnabled) {

			float causticsStrength = mix(uNightBrightness, uDayBrightness, omw.sunVis) * uCausticBrightness;
			float causticsFade = clamp((waterH - worldPos.z) * 1.0 / uFadeLength, 0.0, 1.0);
			vec3 caustics = vec3(uMinBrightness) + sampleCaustics(uFollowSun ? wposUV : worldPos.xy) * causticsStrength * (uSunTint ? omw.sunColor.xyz : vec3(1.0));

			causticsTerm = mix(vec3(1.0), caustics, causticsFade);

			if(uSunMask)
			{
				float sunMask = saturate(dot(normals, vec3(0.0, 0.0, 1.0))); // mask z-up only for now until I figure out how to make masking based on sun direction not invert at night
				sunMask = mix(1.0, sunMask, causticsFade);
				causticsTerm = mix(vec3(uMinBrightness), causticsTerm, sunMask);
			}
		}
		
		vec3 col = scene * causticsTerm;

		if(uFog)
			col = mix(col, omw.fogColor.xyz, omw_EstimateFogCoverageFromUV(omw_TexCoord));

		if (uDithering) {
			vec2 ditherCoord = (omw_TexCoord.xy * omw.resolution) / 256.0; // divide by texture resolution
			if (uTemporalDithering)
				ditherCoord += 1337.0*fract(omw.simulationTime);

			float bn = omw_Texture2D(blueNoise, ditherCoord).r * omw_EstimateFogCoverageFromUV(omw_TexCoord);
			float dithering = bn * (1.0 / uDitheringStrength);
			col.rgb += dithering;
		}
		
		if (uCausticsMask) {
			col = causticsTerm;
		}
		
		if (uEnabled) {
			omw_FragColor = vec4(col, 1.0);
		} 
		else {
			omw_FragColor = vec4(scene, 1.0);
		}
	}
}

technique {
    description = "Tweakable underwater caustics.";
    passes = main;
    version = "1.1";
    author = "Epoch";
	pass_normals = true;
	flags = disable_abovewater;
}
