uniform_float uColorDepth {
    default = 32.0;
    min = 0.0;
    max = 255.0;
    step = 1.0;
    display_name = "Color Depth";
}

uniform_int uResolutionScale {
    default = 1;
    min = 1;
    display_name = "Dither Size";
    description = "Scale of the dithering effect on the screen";
}

sampler_2d dithertex8 {
	source = "textures/dither8.png";
	mag_filter = nearest;
	min_filter = nearest;
	wrap_s = repeat;
	wrap_t = repeat;
}

fragment main {
	omw_In vec2 omw_TexCoord;

    float channelError(float col, float colMin, float colMax)
    {
        float range = abs(colMin - colMax);
        float aRange = abs(col - colMin);
        return aRange /range;
    }

    float ditheredChannel(float error, vec2 ditherBlockUV)
    {
        float pattern = omw_Texture2D(dithertex8, ditherBlockUV).r;
        if (error > pattern) {
            return 1.0;
        } else {
            return 0.0;
        }
    }

    vec3 RGBtoYUV(vec3 rgb)
    {
        vec3 yuv;
        yuv.r = rgb.r * 0.2126 + 0.7152 * rgb.g + 0.0722 * rgb.b;
        yuv.g = (rgb.b - yuv.r) / 1.8556;
        yuv.b = (rgb.r - yuv.r) / 1.5748;

        // Adjust to work on GPU
        yuv.gb += 0.5;

        return yuv;
    }

    vec3 YUVtoRGB(vec3 yuv)
    {
        yuv.gb -= 0.5;
        return vec3(
            yuv.r * 1.0 + yuv.g * 0.0 + yuv.b * 1.5748,
            yuv.r * 1.0 + yuv.g * -0.187324 + yuv.b * -0.468124,
            yuv.r * 1.0 + yuv.g * 1.8556 + yuv.b * 0.0
        );
    }

    vec3 ditherColor(vec3 col, vec2 uv, float xres, float yres)
    {
        vec3 yuv = RGBtoYUV(col);

        vec3 col1 = floor(yuv * uColorDepth) / uColorDepth;
        vec3 col2 = ceil(yuv * uColorDepth) / uColorDepth;

        // Calculate dither texture UV based on the input texture
        vec2 ditherBlockUV = uv * vec2(xres / 8.0, yres / 8.0);

        yuv.x = mix(col1.x, col2.x, ditheredChannel(channelError(yuv.x, col1.x, col2.x), ditherBlockUV));
        yuv.y = mix(col1.y, col2.y, ditheredChannel(channelError(yuv.y, col1.y, col2.y), ditherBlockUV));
        yuv.z = mix(col1.z, col2.z, ditheredChannel(channelError(yuv.z, col1.z, col2.z), ditherBlockUV));

        return(YUVtoRGB(yuv));
    }

    vec3 getPixel(vec2 uv)
    {
        return omw_GetLastShader(uv).rgb;
    }

	void main()
	{
		vec2 uv = omw_TexCoord;

        vec3 col = getPixel(uv);
        col = ditherColor(col, uv, omw.resolution.x / uResolutionScale, omw.resolution.y / uResolutionScale);

		omw_FragColor = vec4(col, 1.0);
	}
}


technique {
    description = "Retro Dithering, unabashedly copied from www.shadertoy.com/view/tlc3DM, which was ported from github.com/jmickle66666666/PSX-Dither-Shader/";
    passes = main;
    version = "1.0";
    author = "jmickle66666666, BitOfGold, Epoch";
}
