uniform_float dropletSpeed {
	default = 0.3;
	step = 0.01;
}

uniform_float distortionStrength {
	default = 0.2;
	step = 0.01;
}

uniform_float textureScale {
	default = 2048.0;
	step = 64.0;
}

uniform_bool uEnabled {
	default = true;
	header = "Debug";
	display_name = "Enable Shader";
	description = "Toggle the entire shader";
}

sampler_2d raindropsSampler {
	source = "textures/raindrops.png";
	wrap_s = repeat;
	wrap_t = repeat;
}

shared {
	
}

fragment main {
	omw_In vec2 omw_TexCoord;
	
	// borrowed from zesterer
	float rain_transition(int i) {
		if (i == 0) return 0.0;  //Clear
		if (i == 1) return 0.0; //Cloudy
		if (i == 2) return 0.0;  //Foggy
		if (i == 3) return 0.0;  //Overcast
		if (i == 4) return 0.6;  //Rain
		if (i == 5) return 1.0;  //Thunder
		if (i == 6) return 0.0;  //Ash
		if (i == 7) return 0.0;  //Blight
		if (i == 8) return 0.0;  //Snow
		return 0.0;   //Blizzard
	};


	void main()
	{
		
		vec4 scene = omw_GetLastShader(omw_TexCoord);
		vec2 uv = omw_TexCoord;
		
		if (uEnabled) {

			float rainStrength = mix(
                rain_transition(omw.weatherID),
                rain_transition(omw.nextWeatherID),
                omw.weatherTransition
            );

			vec4 dropletMask = omw_Texture2D(raindropsSampler, omw_TexCoord * omw.resolution / vec2(textureScale));

			float time = omw.simulationTime * (dropletSpeed * rainStrength);
			time = fract(time + dropletMask.z * 2.0);

			float droplet = dropletMask.a - time;

			vec2 dropletNormal = (droplet * dropletMask.xy);
			dropletNormal *= distortionStrength * rainStrength;
			dropletNormal = clamp(dropletNormal, vec2(-1.0), vec2(1.0));
			vec2 texCoord = uv + clamp(dropletNormal, 0.0, 1.0);

			scene = omw_GetLastShader(texCoord);
			omw_FragColor = scene;
		} 
		else {
			omw_FragColor = scene;
		}
	}
}

technique {
    description = "Rain drops shader. Applies drops to the 'camera lens' when its raining.";
    passes = main;
    version = "1.0";
    author = "Epoch";
    flags = disable_interiors, disable_underwater;
}
