uniform_float uColorDepth {
    default = 255.0;
    min = 2.0;
    max = 255.0;
    step = 1.0;
}

uniform_bool temporalDither {
	default = false;
}

uniform_bool enabled {
	default = true;
}

uniform_bool clampColors {
	default = false;
}

shared {

	vec3 screen_space_dither(vec2 frag_coord) {
	
		// Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR.
		vec3 dither = vec3(dot(vec2(171.0, 231.0), frag_coord));
		dither.rgb = fract(dither.rgb / vec3(103.0, 71.0, 97.0));

		// Subtract 0.5 to avoid slightly brightening the whole viewport.
		return (dither.rgb - 0.5) / uColorDepth;
	}
}

fragment dither {
	omw_In vec2 omw_TexCoord;
	
	void main()
	{
		vec3 scene = omw_GetLastShader(omw_TexCoord).rgb;
		
		vec2 fragCoord = omw_TexCoord.xy * omw.resolution;
		
		if (temporalDither) {
			fragCoord += omw.simulationTime;
		}
		
		if (enabled) {
			scene += screen_space_dither(fragCoord.xy);
		}
		
		if (clampColors){
			scene = vec3(floor(scene.rgb * uColorDepth) / uColorDepth);
		}

		omw_FragColor = vec4(scene.rgb, 1.0);
	}
}


technique {
    description = "Valve's screen space dither shader for debanding";
    passes = dither;
    version = "1.0";
    author = "Epoch";
}
